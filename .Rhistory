}
# plot the CI of times of coalescent
time_df <- data.frame(matrix(unlist(times_in_past_of_coal_events_donor), numb_clones_donor-1, nsims))
sort_time_df <- apply(time_df, 1, sort)
lower_time <- sort_time_df[floor(0.025*nsims), ]
upper_time <- sort_time_df[floor(0.975*nsims), ]
median_time <- sort_time_df[floor(0.5*nsims), ]
df <- data.frame(x =1:(numb_clones_donor-1),
M =median_time,
L =lower_time,
U =upper_time)
ggplot(df, aes(x = x, y = M)) +
geom_point(size = 4) +
geom_errorbar(aes(ymax = U, ymin = L)) +
ylab("Time since sample (years)") +
xlab("Coalescent event") +
ggtitle(sprintf("Fig S4: beta = %.1f per year", beta))
?data.frame
index.mort = 0
index.ps = 0
mortality.rate = data.frame
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
mortality.rate(index.ps,index.ps) = mr * ps
}
}
index.mort = 0
index.ps = 0
mortality.rate = data.frame
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
mortality.rate(index.ps,index.ps) = mort * ps
}
}
index.mort = 0
index.ps = 0
mortality.rate = data.frame
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
index.ps = 0
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
mortality.rate[index.ps,index.ps] = mort * ps
}
}
index.mort = 0
index.ps = 0
mortality.rate = matrix()
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
index.ps = 0
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
mortality.rate[index.ps,index.ps] = mort * ps
}
}
index.mort = 0
index.ps = 0
mortality.rate = matrix(, nrow=3,ncol=3)
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
index.ps = 0
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
mortality.rate[index.ps,index.ps] = mort * ps
}
}
index.mort = 0
index.ps = 0
mortality.rate = matrix(,nrow=3,ncol=3)
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
index.ps = 0
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
mortality.rate[index.ps,index.ps] = mort * ps
}
}
mortality.rate
rm mortality.rate
rm(list=ls())
index.mort = 0
index.ps = 0
mortality.rate = matrix(,nrow=3,ncol=3)
mortality.rate
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
index.ps = 0
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
mortality.rate[index.ps,index.ps] = mort * ps
}
}
mortality.rate
index.mort = 0
index.ps = 0
mortality.rate = matrix(,nrow=3,ncol=3)
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
index.ps = 0
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
print(index.mort)
print(index.ps)
mortality.rate[index.ps,index.ps] = mort * ps
}
}
index.mort = 0
index.ps = 0
mortality.rate = matrix(,nrow=3,ncol=3)
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
index.ps = 0
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
print(mort)
print(ps)
mortality.rate[index.ps,index.ps] = mort * ps
}
}
index.mort = 0
index.ps = 0
mortality.rate = matrix(,nrow=3,ncol=3)
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
index.ps = 0
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
print(mort)
print(ps)
mortality.rate[index.mort,index.ps] = mort * ps
}
}
mortality.rate
index.mort = 0
index.ps = 0
mortality.rate = matrix(,nrow=3,ncol=3)
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
index.ps = 0
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
print(mort)
print(ps)
mortality.rate[index.mort,index.ps] = 10000 * mort / ps
}
}
mortality.rate
calculateRnought <- function(trans.rate, recovery.rate){
# function for R0 in an SIR model
R0 = trans.rate / recovery.rate
return R0
}
calculateRnought(0.1, 0.2)
calculateRnought <- function(trans.rate, recovery.rate){
# function for R0 in an SIR model
R0 = trans.rate / recovery.rate
return R0
}
calculateRnought(0.1, 0.2)
calculateRnought <- function(trans.rate, recovery.rate){
# function for R0 in an SIR model
R0 = trans.rate / recovery.rate
return(R0)
}
calculateRnought(0.1, 0.2)
0.1/0.2
calculateVaccineThreshold <- function(trans.rate, recovery.rate){
# function for R0 in an SIR model
R0 = trans.rate / recovery.rate
vaccine.threshold = 1 - 1/R0
return(vaccine.threshold)
}
calculateVaccineThreshold(1, 0.2)
index.mort = 0
index.ps = 0
mortality.rate = matrix(,nrow=3,ncol=3)
# Loop around the possible values for mort
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
index.ps = 0
# Loop around the possible values for pop size
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
mortality.rate[index.ps,index.ps]
= 10000 * mort / ps
}
}
index.mort = 0
index.ps = 0
mortality.rate = matrix(,nrow=3,ncol=3)
# Loop around the possible values for mort
for (mort in c(103, 401, 322)){
index.mort = index.mort + 1
index.ps = 0
# Loop around the possible values for pop size
for (ps in c(1e4,5e4,7.5e4)){
index.ps = index.ps + 1
mortality.rate[index.ps,index.ps] = 10000 * mort / ps
}
}
mortality.rate
quadratic.soln <- function(a,b,c){
sol = c(0,0)
sol[1] = -b + sqrt(b^2 - 4*a*c)
sol[2] = -b - sqrt(b^2 - 4*a*c)
return(sol)
}
quadratic.soln(1,1,1)
quadratic.soln(1,2,1)
quadratic.soln(2,2,1)
quadratic.soln(2,-2,1)
quadratic.soln <- function(a,b,c){
sol = c(0,0)
sol[1] = -b + sqrt(b^2 - 4*a*c)/(2*a)
sol[2] = -b - sqrt(b^2 - 4*a*c)/(2*a)
return(sol)
}
quadratic.soln(2,-2,1)
quadratic.soln(1,4,-2)
quadratic.soln(1,-4,-2)
a = 1; b = -4; c = -2
sol = c(0,0)
sol[1] = -b + sqrt(b^2 - 4*a*c)/(2*a)
sol[2] = -b - sqrt(b^2 - 4*a*c)/(2*a)
print(sol)
install.packages("pdftools")
index_i = 0
epidemic = matrix()
for (infectiousness.duration in 1:10){
index_i = index_i + 1
index_j = 0
for (beta in seq(0.1, 0.5, by = 0.1)){
index_j = index_j + 1
R0 = beta / infectiousness.duration
## ##
epidemic[index_i, index_j] = R0
}
}
infectiousness.duration = 1:10
beta = seq(0.1, 0.5, by = 0.1)
epidemic = matrix(NA,nrow=length(infectiousness.duration), ncol=length(beta))
for (index_i in 1:length(infectiousness.duration)){
for (index_j in 1:length(beta)){
R0 = beta / infectiousness.duration
epidemic[index_i, index_j] = R0
}
}
infectiousness.duration = 1:10
beta = seq(0.1, 0.5, by = 0.1)
epidemic = matrix(NA,nrow=length(infectiousness.duration), ncol=length(beta))
for (index_i in 1:length(infectiousness.duration)){
for (index_j in 1:length(beta)){
R0 = beta[index_j] * infectiousness.duration[index_i]
epidemic[index_i, index_j] = R0
}
}
epidemic
fun <- function (x) cos(2*x)^3
curve(fun(x), 0, 8)
abline(h = 0, lty = 3)
uni <- uniroot(fun, c(0, 8))$root
uni
uni
final.size <- function(s.inf)(4*(s.inf - 1) - ln(s.inf))
u <- uniroot(final.size, c(0,1))$root
final.size <- function(s.inf)(4*(s.inf - 1) - log(s.inf))
u <- uniroot(final.size, c(0,1))$root
u
final.size <- function(s.inf)(3*(s.inf - 1) - log(s.inf))
u <- uniroot(final.size, c(0,1))$root
u
final.size <- function(s.inf)(1*(s.inf - 1) - log(s.inf))
u <- uniroot(final.size, c(0,1))$root
u
final.size <- function(s.inf)(2*(s.inf - 1) - log(s.inf))
u <- uniroot(final.size, c(0,0.9999))$root
u
final.size.root <- function(R0, s.inf)(R0*(s.inf - 1) - log(s.inf))
# We have set the final.size.root such that whenever it evaluates 0, we have found a soluation
# R has some in built functions to help you solve this equation
sol.root <- uniroot(final.size(3), c(0,0.9999))$root
final.size.root <- function(R0, s.inf)(R0*(s.inf - 1) - log(s.inf))
# We have set the final.size.root such that whenever it evaluates 0, we have found a soluation
# R has some in built functions to help you solve this equation
sol.root <- uniroot(final.size.root(3), c(0,0.9999))$root
sol.root <- uniroot(function(x) final.size.root(R, s.inf),c(0,5))
sol.root <- uniroot(function(s.inf) final.size.root(R0, s.inf),c(0,0.999))
sol.root
sol.root <- uniroot(function(s.inf) final.size.root(R0, s.inf),c(0,0.999))$root
sol.root
R0 = 2
sol.root <- uniroot(function(s.inf) final.size.root(R0, s.inf),c(0,0.999))$root
sol.root
sol.root <- uniroot(final.size.root, c(0,0.9999))$root
final.size.root <- function(s.inf)(R0*(s.inf - 1) - log(s.inf))
# (5) Debugging
########## (1) Control Statements  ##########
# initialise variables
infectiousness.duration = 1:10
beta = seq(0.1, 0.5, by = 0.1)
epidemic = matrix(NA,nrow=length(infectiousness.duration), ncol=length(beta))
for (index_i in 1:length(infectiousness.duration)){
for (index_j in 1:length(beta)){
R0 = beta[index_j] * infectiousness.duration[index_i]
epidemic[index_i, index_j] = R0
}
}
# Questions:
#
#   (a) Why do you initialise variables at the start of the script?
#   Answer:
#   (b) We have 'indexed over 'index_i' and 'index_j'. Can you think of alternative indices?
#   Answer:
#   (c) If we want to save whether there is an epidemic or not, rather than R0,
#   can you add an if/else statement to capture this?
#   Write in your answer in the following code:
infectiousness.duration = 1:10
beta = seq(0.1, 0.5, by = 0.1)
epidemic = matrix(NA,nrow=length(infectiousness.duration), ncol=length(beta))
for (index_i in 1:length(infectiousness.duration)){
for (index_j in 1:length(beta)){
R0 = beta[index_j] * infectiousness.duration[index_i]
## <INSERT CODE HERE
epidemic[index_i, index_j] = R0
## <INSERT CODE HERE
}
}
final.size.root <- function(s.inf)(R0*(s.inf - 1) - log(s.inf))
sol.root <- uniroot(final.size.root, c(0,0.9999))$root
sol.root
final.size.root.twoargs <- function(R0, s.inf){
R0*(s.inf - 1) - log(s.inf)
}
rep.num = 2
sol.root <- uniroot(function(s.inf) final.size.root.twoargs(rep.num, s.inf), c(0,0.9999))$root
sol.root
install.packages("rootSolve")
?multiroot
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
setwd("~/Dropbox/Work/Covid/network_models/ringbp_transmission_chain")
library(data.table)
library(dplyr)
source("R/scenario_sim.R")
tt <- scenario_sim(n.sim = 20,  # number of simulations
cap_cases = 100, # minimum number of cases
cap_max_days = 100, # minimum number of days (simulation stops after either min cases or min days has been reached in n-1 generation
num.initial.cases = 1,  # number of initial infected individuals
initial.case.adult = FALSE, # whether initial case is an adult or a child
prop.asym = 0,   # probability of asymptomatic infection
prop.seq = 1,   # proportion of symptomatic cases that are sequenced
r0community = 2.5,  # population R0
disp.com = 0.16,  # dispersal parameter (of neg binom distribution) of community reproduction numbers
rel.infectiousness.c = 1, # relative infectiousness of child infections to adult infections
rel.susceptibility.c = 1, # relative susceptibility of child infections to adult infections
k = 0,  # skew parameter to sample serial interval from incubation period distribution
####### final parameters not needed for tranmission chain generation (assuming no isolation / quarantine)
r0isolated = 0,  # R0 for isolated cases
disp.iso = 1,  # dispersal parameter (of neg binom distribution) of reproduction numbers
prop.ascertain = 0, # probability of detecting case for isolation
quarantine = FALSE) #whether quarantine is implemented
source("R/scenario_sim.R")
tt <- scenario_sim(n.sim = 20,  # number of simulations
cap_cases = 100, # minimum number of cases
cap_max_days = 100, # minimum number of days (simulation stops after either min cases or min days has been reached in n-1 generation
num.initial.cases = 1,  # number of initial infected individuals
initial.case.adult = FALSE, # whether initial case is an adult or a child
prop.asym = 0,   # probability of asymptomatic infection
prop.seq = 1,   # proportion of symptomatic cases that are sequenced
r0community = 2.5,  # population R0
disp.com = 0.16,  # dispersal parameter (of neg binom distribution) of community reproduction numbers
rel.infectiousness.c = 1, # relative infectiousness of child infections to adult infections
rel.susceptibility.c = 1, # relative susceptibility of child infections to adult infections
k = 0,  # skew parameter to sample serial interval from incubation period distribution
####### final parameters not needed for tranmission chain generation (assuming no isolation / quarantine)
r0isolated = 0,  # R0 for isolated cases
disp.iso = 1,  # dispersal parameter (of neg binom distribution) of reproduction numbers
prop.ascertain = 0, # probability of detecting case for isolation
quarantine = FALSE) #whether quarantine is implemented
source("R/scenario_sim.R")
tt <- scenario_sim(n.sim = 20,  # number of simulations
cap_cases = 100, # minimum number of cases
cap_max_days = 100, # minimum number of days (simulation stops after either min cases or min days has been reached in n-1 generation
num.initial.cases = 1,  # number of initial infected individuals
initial.case.adult = FALSE, # whether initial case is an adult or a child
prop.asym = 0,   # probability of asymptomatic infection
prop.seq = 1,   # proportion of symptomatic cases that are sequenced
r0community = 2.5,  # population R0
disp.com = 0.16,  # dispersal parameter (of neg binom distribution) of community reproduction numbers
rel.infectiousness.c = 1, # relative infectiousness of child infections to adult infections
rel.susceptibility.c = 1, # relative susceptibility of child infections to adult infections
k = 0,  # skew parameter to sample serial interval from incubation period distribution
####### final parameters not needed for tranmission chain generation (assuming no isolation / quarantine)
r0isolated = 0,  # R0 for isolated cases
disp.iso = 1,  # dispersal parameter (of neg binom distribution) of reproduction numbers
prop.ascertain = 0, # probability of detecting case for isolation
quarantine = FALSE) #whether quarantine is implemented
source("R/scenario_sim.R")
tt <- scenario_sim(n.sim = 20,  # number of simulations
cap_cases = 100, # minimum number of cases
cap_max_days = 100, # minimum number of days (simulation stops after either min cases or min days has been reached in n-1 generation
num.initial.cases = 1,  # number of initial infected individuals
initial.case.adult = FALSE, # whether initial case is an adult or a child
prop.asym = 0,   # probability of asymptomatic infection
prop.seq = 1,   # proportion of symptomatic cases that are sequenced
r0community = 2.5,  # population R0
disp.com = 0.16,  # dispersal parameter (of neg binom distribution) of community reproduction numbers
rel.infectiousness.c = 1, # relative infectiousness of child infections to adult infections
rel.susceptibility.c = 1, # relative susceptibility of child infections to adult infections
k = 0,  # skew parameter to sample serial interval from incubation period distribution
####### final parameters not needed for tranmission chain generation (assuming no isolation / quarantine)
r0isolated = 0,  # R0 for isolated cases
disp.iso = 1,  # dispersal parameter (of neg binom distribution) of reproduction numbers
prop.ascertain = 0, # probability of detecting case for isolation
quarantine = FALSE) #whether quarantine is implemented
source("R/scenario_sim.R")
tt <- scenario_sim(n.sim = 20,  # number of simulations
cap_cases = 100, # minimum number of cases
cap_max_days = 100, # minimum number of days (simulation stops after either min cases or min days has been reached in n-1 generation
num.initial.cases = 1,  # number of initial infected individuals
initial.case.adult = FALSE, # whether initial case is an adult or a child
prop.asym = 0,   # probability of asymptomatic infection
prop.seq = 1,   # proportion of symptomatic cases that are sequenced
r0community = 2.5,  # population R0
disp.com = 0.16,  # dispersal parameter (of neg binom distribution) of community reproduction numbers
rel.infectiousness.c = 1, # relative infectiousness of child infections to adult infections
rel.susceptibility.c = 1, # relative susceptibility of child infections to adult infections
k = 0,  # skew parameter to sample serial interval from incubation period distribution
####### final parameters not needed for tranmission chain generation (assuming no isolation / quarantine)
r0isolated = 0,  # R0 for isolated cases
disp.iso = 1,  # dispersal parameter (of neg binom distribution) of reproduction numbers
prop.ascertain = 0, # probability of detecting case for isolation
quarantine = FALSE) #whether quarantine is implemented
source("R/scenario_sim.R")
tt <- scenario_sim(n.sim = 20,  # number of simulations
cap_cases = 100, # minimum number of cases
cap_max_days = 100, # minimum number of days (simulation stops after either min cases or min days has been reached in n-1 generation
num.initial.cases = 1,  # number of initial infected individuals
initial.case.adult = FALSE, # whether initial case is an adult or a child
prop.asym = 0,   # probability of asymptomatic infection
prop.seq = 1,   # proportion of symptomatic cases that are sequenced
r0community = 2.5,  # population R0
disp.com = 0.16,  # dispersal parameter (of neg binom distribution) of community reproduction numbers
rel.infectiousness.c = 1, # relative infectiousness of child infections to adult infections
rel.susceptibility.c = 1, # relative susceptibility of child infections to adult infections
k = 0,  # skew parameter to sample serial interval from incubation period distribution
####### final parameters not needed for tranmission chain generation (assuming no isolation / quarantine)
r0isolated = 0,  # R0 for isolated cases
disp.iso = 1,  # dispersal parameter (of neg binom distribution) of reproduction numbers
prop.ascertain = 0, # probability of detecting case for isolation
quarantine = FALSE) #whether quarantine is implemented
dim(tt[[1]])
dim(tt[[2]])
source("R/scenario_sim.R")
tt <- scenario_sim(n.sim = 20,  # number of simulations
cap_cases = 100, # minimum number of cases
cap_max_days = 100, # minimum number of days (simulation stops after either min cases or min days has been reached in n-1 generation
num.initial.cases = 1,  # number of initial infected individuals
initial.case.adult = FALSE, # whether initial case is an adult or a child
prop.asym = 0,   # probability of asymptomatic infection
prop.seq = 1,   # proportion of symptomatic cases that are sequenced
r0community = 2.5,  # population R0
disp.com = 0.16,  # dispersal parameter (of neg binom distribution) of community reproduction numbers
rel.infectiousness.c = 1, # relative infectiousness of child infections to adult infections
rel.susceptibility.c = 1, # relative susceptibility of child infections to adult infections
k = 0,  # skew parameter to sample serial interval from incubation period distribution
####### final parameters not needed for tranmission chain generation (assuming no isolation / quarantine)
r0isolated = 0,  # R0 for isolated cases
disp.iso = 1,  # dispersal parameter (of neg binom distribution) of reproduction numbers
prop.ascertain = 0, # probability of detecting case for isolation
quarantine = FALSE) #whether quarantine is implemented
source("R/scenario_sim.R")
tt <- scenario_sim(n.sim = 20,  # number of simulations
cap_cases = 100, # minimum number of cases
cap_max_days = 100, # minimum number of days (simulation stops after either min cases or min days has been reached in n-1 generation
num.initial.cases = 1,  # number of initial infected individuals
initial.case.adult = FALSE, # whether initial case is an adult or a child
prop.asym = 0,   # probability of asymptomatic infection
prop.seq = 1,   # proportion of symptomatic cases that are sequenced
r0community = 2.5,  # population R0
disp.com = 0.16,  # dispersal parameter (of neg binom distribution) of community reproduction numbers
rel.infectiousness.c = 1, # relative infectiousness of child infections to adult infections
rel.susceptibility.c = 1, # relative susceptibility of child infections to adult infections
k = 0,  # skew parameter to sample serial interval from incubation period distribution
####### final parameters not needed for tranmission chain generation (assuming no isolation / quarantine)
r0isolated = 0,  # R0 for isolated cases
disp.iso = 1,  # dispersal parameter (of neg binom distribution) of reproduction numbers
prop.ascertain = 0, # probability of detecting case for isolation
quarantine = FALSE) #whether quarantine is implemented
source("R/scenario_sim.R")
source("R/scenario_sim.R")
tt <- scenario_sim(n.sim = 20,  # number of simulations
cap_cases = 100, # minimum number of cases
cap_max_days = 100, # minimum number of days (simulation stops after either min cases or min days has been reached in n-1 generation
num.initial.cases = 1,  # number of initial infected individuals
initial.case.adult = FALSE, # whether initial case is an adult or a child
prop.asym = 0,   # probability of asymptomatic infection
prop.seq = 1,   # proportion of symptomatic cases that are sequenced
r0community = 2.5,  # population R0
disp.com = 0.16,  # dispersal parameter (of neg binom distribution) of community reproduction numbers
rel.infectiousness.c = 1, # relative infectiousness of child infections to adult infections
rel.susceptibility.c = 1, # relative susceptibility of child infections to adult infections
k = 0,  # skew parameter to sample serial interval from incubation period distribution
####### final parameters not needed for tranmission chain generation (assuming no isolation / quarantine)
r0isolated = 0,  # R0 for isolated cases
disp.iso = 1,  # dispersal parameter (of neg binom distribution) of reproduction numbers
prop.ascertain = 0, # probability of detecting case for isolation
quarantine = FALSE) #whether quarantine is implemented
